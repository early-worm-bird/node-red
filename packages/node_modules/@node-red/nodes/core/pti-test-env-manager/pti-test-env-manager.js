module.exports  = function(RED) {
    function PtiFlowGeneratorNode(config) {
        RED.nodes.createNode(this,  config);
        var node = this;
        
        node.on('input',  function(msg) {
            try {
                // Get configuration from node properties 
                var dashboardTabName = config.dashboardTabName  || "PTI Config";
                var dashboardGroupName = config.dashboardGroupName  || "PTI Settings";
                var enableBasicFlow = config.enableBasicFlow || false;
                var enableBarcodeEvent = config.enableBarcodeEvent || false;
                var enableResultEvent = config.enableResultEvent || false;
                var enableBoardCodeReturn = config.enableBoardCodeReturn || false;
                
                // Parse input fields (compatible with both stringified JSON and direct object)
                var inputFields;
                if (typeof config.inputFields  === 'string') {
                    try {
                        inputFields = JSON.parse(config.inputFields); 
                    } catch (e) {
                        inputFields = [
                            { name: "设备状态上传Url", key: "DevStatusUrl" },
                            { name: "拼版码查询Url", key: "copyUrl" }
                        ];
                    }
                } else if (Array.isArray(config.inputFields))  {
                    inputFields = config.inputFields; 
                } else {
                    inputFields = [
                        { name: "设备状态上传Url", key: "DevStatusUrl" },
                        { name: "拼版码查询Url", key: "copyUrl" }
                    ];
                }
                
                // Ensure inputFields is an array with proper structure 
                if (!Array.isArray(inputFields))  {
                    inputFields = [
                        { name: "设备状态上传Url", key: "DevStatusUrl" },
                        { name: "拼版码查询Url", key: "copyUrl" }
                    ];
                } else {
                    // Filter out invalid entries 
                    inputFields = inputFields.filter(field  => 
                        field && typeof field === 'object' && 
                        field.name  && field.key  
                    );
                }
                
                // Generate the flow 
                var flow = generateNodeRedFlow(dashboardTabName, dashboardGroupName, inputFields, enableBasicFlow, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn);
                
                // Output the generated flow 
                msg.payload  = flow;
                node.send(msg);  
                
            } catch (err) {
                node.error("Error  generating flow: " + err, msg);
            }
        });
        
        // Function to generate the Node-RED flow 
        function generateNodeRedFlow(dashboardTabName, dashboardGroupName, inputFields, enableBasicFlow, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn) {
            function generateFixedId() {
                return Array.from({  length: 16 }, () =>
                    Math.floor(Math.random()  * 16).toString(16)).join('');
            }
 
            const tabId = generateFixedId();
            const groupId = generateFixedId();
            const flowId = generateFixedId();
 
            // Create base nodes 
            const nodes = [
                // UI Tab 
                {
                    id: tabId,
                    type: "ui_tab",
                    name: dashboardTabName,
                    icon: "dashboard",
                    disabled: false,
                    hidden: false 
                },
                // UI Group 
                {
                    id: groupId,
                    type: "ui_group",
                    name: dashboardGroupName,
                    tab: tabId,
                    order: 1,
                    disp: true,
                    width: "24",
                    collapse: false,
                    className: ""
                }
            ];
 
            // Create save button 
            const buttonId = generateFixedId();
            const summaryId = generateFixedId();
            const debugSaveId = generateFixedId();
            const fileId = generateFixedId();
            const debugSummaryId = generateFixedId();
 
            nodes.push({  
                id: buttonId,
                type: "ui_button",
                z: flowId,
                name: "",
                group: groupId,
                order: 29,
                width: 24,
                height: 1,
                passthru: false,
                label: "保存",
                tooltip: "",
                color: "",
                bgcolor: "",
                className: "",
                icon: "",
                payload: "",
                payloadType: "str",
                topic: "topic",
                topicType: "msg",
                x: 1030,
                y: 660,
                wires: [[summaryId, debugSaveId]]
            });
 
            // Data summary node 
            nodes.push({  
                id: summaryId,
                type: "function",
                z: flowId,
                name: "数据汇总",
                func: generateSummaryFunction(inputFields, enableBasicFlow, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn),
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 1200,
                y: 660,
                wires: [[fileId, debugSummaryId]]
            });
 
            // Debug nodes 
            nodes.push({  
                id: debugSaveId,
                type: "debug",
                z: flowId,
                name: "保存完成",
                active: true,
                tosidebar: true,
                console: false,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1110,
                y: 740,
                wires: []
            });
 
            nodes.push({  
                id: debugSummaryId,
                type: "debug",
                z: flowId,
                name: "数据汇总",
                active: true,
                tosidebar: true,
                console: false,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1410,
                y: 580,
                wires: []
            });
 
            // File node 
            const fileInId = generateFixedId();
            nodes.push({  
                id: fileId,
                type: "file",
                z: flowId,
                name: "",
                filename: "PtiTestEnv",
                filenameType: "str",
                appendNewline: true,
                createDir: true,
                overwriteFile: "true",
                encoding: "none",
                x: 1390,
                y: 660,
                wires: [[fileInId]]
            });
 
            // Create input fields and related nodes 
            inputFields.forEach((field,  index) => {
                const inputId = generateFixedId();
                const functionId = generateFixedId();
                const debugId = generateFixedId();
 
                const order = (index + 1) * 2 + 2;
 
                // Input field 
                nodes.push({  
                    id: inputId,
                    type: "ui_text_input",
                    z: flowId,
                    name: "",
                    label: `${field.name}(${field.key})`,  
                    tooltip: "",
                    group: groupId,
                    order: order,
                    width: 12,
                    height: 1,
                    passthru: false,
                    mode: "text",
                    delay: 300,
                    topic: "payload",
                    sendOnBlur: false,
                    className: "",
                    topicType: "msg",
                    x: 490 + index * 20,
                    y: 560 + index * 120,
                    wires: [[debugId, functionId]]
                });
 
                // Function node 
                nodes.push({  
                    id: functionId,
                    type: "function",
                    z: flowId,
                    name: "参数设定",
                    func: generateSetFunction(field.key),  
                    outputs: 1,
                    timeout: 0,
                    noerr: 0,
                    initialize: "",
                    finalize: "",
                    libs: [],
                    x: 680 + index * 40,
                    y: 560 + index * 120,
                    wires: [[buttonId]]
                });
 
                // Debug node 
                nodes.push({  
                    id: debugId,
                    type: "debug",
                    z: flowId,
                    name: `${field.name}(${field.key})`,  
                    active: true,
                    tosidebar: true,
                    console: false,
                    tostatus: false,
                    complete: "payload",
                    targetType: "msg",
                    statusVal: "",
                    statusType: "auto",
                    x: 630 + index * 20,
                    y: 500 + index * 120,
                    wires: []
                });
            });

            // 如果启用基础流程，添加额外的节点
            if (enableBasicFlow) {
                const basicFlowNodes = generateBasicFlowNodes(flowId, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn);
                nodes.push(...basicFlowNodes);
            }
 
            // Create initialization nodes 
            const injectId = generateFixedId();
            const clearId = generateFixedId();
            const completeId = generateFixedId();
 
            nodes.push({  
                id: injectId,
                type: "inject",
                z: flowId,
                name: "",
                props: [{ p: "payload" }, { p: "topic", vt: "str" }],
                repeat: "",
                crontab: "",
                once: true,
                onceDelay: 0.1,
                topic: "",
                payload: "",
                payloadType: "date",
                x: 80,
                y: 660,
                wires: [[clearId]]
            });
 
            nodes.push({  
                id: clearId,
                type: "function",
                z: flowId,
                name: "至空",
                func: "msg.payload=\"\"\nreturn  msg;",
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 230,
                y: 660,
                wires: [inputFields.map((_, i) => nodes.find(n  => n.type  === "ui_text_input" && n.order  === (i + 1) * 2 + 2).id)]
            });
 
            // Complete node 
            nodes.push({  
                id: completeId,
                type: "complete",
                z: flowId,
                name: "（数据汇总）之后，清空数据",
                scope: [debugSummaryId],
                uncaught: false,
                x: 120,
                y: 740,
                wires: [[clearId]]
            });
 
            // File reading nodes 
            const debugFileId = generateFixedId();
            const jsonId = generateFixedId();
            const debugParsedId = generateFixedId();
 
            nodes.push({  
                id: fileInId,
                type: "file in",
                z: flowId,
                name: "",
                filename: "PtiTestEnv",
                filenameType: "str",
                format: "utf8",
                chunk: false,
                sendError: false,
                encoding: "none",
                allProps: false,
                x: 1770,
                y: 660,
                wires: [[jsonId]]
            });
 
            // Create UI text display nodes 
            const uiTextNodes = inputFields.map((field,  index) => {
                const textId = generateFixedId();
                return {
                    id: textId,
                    type: "ui_text",
                    z: flowId,
                    group: groupId,
                    order: (index + 1) * 2 + 1,
                    width: 12,
                    height: 1,
                    name: "",
                    label: `${field.name}(${field.key})`,  
                    format: `{{msg.payload.${field.key}}}`,  
                    layout: "row-spread",
                    className: "",
                    style: false,
                    font: "",
                    fontSize: 16,
                    color: "#000000",
                    x: 2670,
                    y: 660 + index * 60,
                    wires: []
                };
            });
 
            nodes.push(...uiTextNodes);  
 
            nodes.push({  
                id: jsonId,
                type: "json",
                z: flowId,
                name: "",
                property: "payload",
                action: "",
                pretty: false,
                x: 2170,
                y: 660,
                wires: [uiTextNodes.map(n => n.id).concat([debugParsedId])]  
            });
 
            // Parameter storage function 
            const storeFuncId = generateFixedId();
            nodes.push({  
                id: storeFuncId,
                type: "function",
                z: flowId,
                name: "参数存储",
                func: generateStoreFunction(inputFields, enableBasicFlow, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn),
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 2640,
                y: 540,
                wires: [[]]
            });
 
            // Debug nodes 
            nodes.push({  
                id: debugFileId,
                type: "debug",
                z: flowId,
                name: "config.txt",  
                active: true,
                tosidebar: true,
                console: false,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1820,
                y: 780,
                wires: []
            });
 
            nodes.push({  
                id: debugParsedId,
                type: "debug",
                z: flowId,
                name: "config解析后数据",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2670,
                y: 780,
                wires: []
            });
 
            // Manual trigger inject node 
            const inject2Id = generateFixedId();
            nodes.push({  
                id: inject2Id,
                type: "inject",
                z: flowId,
                name: "手动读取文件",
                props: [{ p: "payload" }, { p: "topic", vt: "str" }],
                repeat: "",
                crontab: "",
                once: false,
                onceDelay: 0.1,
                topic: "",
                payload: "",
                payloadType: "date",
                x: 1480,
                y: 760,
                wires: [[fileInId]]
            });
 
            // Update JSON node wires 
            const jsonNode = nodes.find(n  => n.id  === jsonId);
            jsonNode.wires[0].push(storeFuncId);  
 
            return nodes;
        }

        // 生成基础流程节点的函数
        function generateBasicFlowNodes(flowId, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn) {
            function generateFixedId() {
                return Array.from({ length: 16 }, () =>
                    Math.floor(Math.random() * 16).toString(16)).join('');
            }

            const basicNodes = [];

            // 注释节点
            basicNodes.push({
                id: generateFixedId(),
                type: "comment",
                z: flowId,
                name: "测试事件",
                info: "# 1.1 设备状态接口",
                x: 80,
                y: 2300,
                wires: []
            });

            // 被触发调试节点
            const debugTriggerId = generateFixedId();
            basicNodes.push({
                id: debugTriggerId,
                type: "debug",
                z: flowId,
                name: "被触发",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 210,
                y: 2240,
                wires: []
            });

            // 处理是否有测试结果函数节点
            const processResultFuncId = generateFixedId();
            
            // PTI数据HTTP节点
            const ptiDataHttpId = generateFixedId();

            // 预先生成条码事件和结果事件节点，并获取需要连接的节点ID
            let barcodeNodeIds = [];
            let resultNodeIds = [];
            
            if (enableBarcodeEvent) {
                const barcodeNodes = generateBarcodeEventNodes(flowId, enableBoardCodeReturn);
                basicNodes.push(...barcodeNodes);
                
                // 找到需要连接的条码节点
                const barcodeDebugNode = barcodeNodes.find(n => n.name === "条码扫描");
                const stationDataNode = barcodeNodes.find(n => n.name === "进站数据获取（同时修改拼接inputUrl）");
                if (barcodeDebugNode && stationDataNode) {
                    barcodeNodeIds = [barcodeDebugNode.id, stationDataNode.id];
                }
            }
            
            if (enableResultEvent) {
                const resultNodes = generateResultEventNodes(flowId);
                basicNodes.push(...resultNodes);
                
                // 找到需要连接的结果节点
                const testResultNode = resultNodes.find(n => n.name === "测试结果");
                const outStationNode = resultNodes.find(n => n.name === "出站事件调用（存储boards)");
                if (testResultNode && outStationNode) {
                    resultNodeIds = [testResultNode.id, outStationNode.id];
                }
            }

            // HTTP输入节点
            const httpInId = generateFixedId();
            basicNodes.push({
                id: httpInId,
                type: "http in",
                z: flowId,
                name: "",
                url: "TestEvent",
                method: "post",
                upload: false,
                swaggerDoc: "",
                x: 80,
                y: 2340,
                wires: [[debugTriggerId, processResultFuncId, ptiDataHttpId]]
            });

            // PTI数据HTTP节点 - 根据勾选状态设置连接
            basicNodes.push({
                id: ptiDataHttpId,
                type: "pti818datahttp",
                z: flowId,
                name: "",
                x: 460,
                y: 2320,
                wires: [barcodeNodeIds, [], [], resultNodeIds]
            });

            // 处理是否有测试结果调试节点
            const processResultDebugId = generateFixedId();
            basicNodes.push({
                id: processResultDebugId,
                type: "debug",
                z: flowId,
                name: "处理是否有测试结果",
                active: false,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 640,
                y: 4460,
                wires: []
            });

            // 开关节点
            const switchId = generateFixedId();
            
            // 处理是否有测试结果函数节点
            basicNodes.push({
                id: processResultFuncId,
                type: "function",
                z: flowId,
                name: "处理是否有测试结果",
                func: `
// 定义变量
let RetrunDetail = msg.payload.Detail;
var Event = msg.payload.Event;
var flag = true;
// 如果RetrunTestData为true并且RetrunDetail中有至少一项，则保留RetrunTestData为true
if (Event == "TestResult") {
 if (RetrunDetail.length <= 0) {
 flag = false;
 }
}

var temp = {
 "RetrunDetail": RetrunDetail,
 "flag": flag,
}

msg.payload = temp;

return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 300,
                y: 4320,
                wires: [[processResultDebugId, switchId]]
            });

            // 开关节点
            const templateId = generateFixedId();
            basicNodes.push({
                id: switchId,
                type: "switch",
                z: flowId,
                name: "",
                property: "payload.flag",
                propertyType: "msg",
                rules: [{ "t": "true" }, { "t": "false" }],
                checkall: "true",
                repair: false,
                outputs: 2,
                x: 570,
                y: 4320,
                wires: [[], [templateId]]
            });

            // NG模板节点
            const httpResponseId = generateFixedId();
            const ngDebugId = generateFixedId();
            basicNodes.push({
                id: templateId,
                type: "template",
                z: flowId,
                name: "NG",
                field: "payload",
                fieldType: "msg",
                format: "handlebars",
                syntax: "mustache",
                template: `{
"TestCancel": 1,
"InfoText": "测试异常，无测试结果"
}`,
                output: "str",
                x: 750,
                y: 4320,
                wires: [[httpResponseId, ngDebugId]]
            });

            // HTTP响应节点
            basicNodes.push({
                id: httpResponseId,
                type: "http response",
                z: flowId,
                name: "http",
                statusCode: "",
                headers: {},
                x: 970,
                y: 4320,
                wires: []
            });

            // 测试异常调试节点
            basicNodes.push({
                id: ngDebugId,
                type: "debug",
                z: flowId,
                name: "测试异常，无测试结果",
                active: false,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 900,
                y: 4280,
                wires: []
            });

            return basicNodes;
        }

        // 生成条码事件节点
        function generateBarcodeEventNodes(flowId, enableBoardCodeReturn) {
            function generateFixedId() {
                return Array.from({ length: 16 }, () =>
                    Math.floor(Math.random() * 16).toString(16)).join('');
            }
            
            const barcodeNodes = [];
            
            // 条码扫描调试节点
            const barcodeDebugId = generateFixedId();
            barcodeNodes.push({
                id: barcodeDebugId,
                type: "debug",
                z: flowId,
                name: "条码扫描",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 810,
                y: 1720,
                wires: []
            });

            // 进站数据获取函数节点
            const stationDataFuncId = generateFixedId();
            const stationDataDebugId = generateFixedId();
            barcodeNodes.push({
                id: stationDataFuncId,
                type: "function",
                z: flowId,
                name: "进站数据获取（同时修改拼接inputUrl）",
                func: `// @ts-ignore
var userName = global.get("userName");
// @ts-ignore
var station = global.get("station");
// @ts-ignore
var resName = global.get("resName");
// @ts-ignore
var equCode = global.get("equCode");
// @ts-ignore
var fixture = global.get("fixture");

// @ts-ignore
var inputApi = global.get("inputApi");
// @ts-ignore
var Url = global.get("Url");
var inputUrl = Url + "?ReqAPI=" + inputApi;
// @ts-ignore
global.set("inputUrl", inputUrl);

var LastBarcode = msg.payload.LastBarcode

var temp={
    "userName": userName,
    "station": station,
    "fixture": fixture,
    "resName": resName,
    "equCode": equCode,
    "LastBarcode": LastBarcode,
    "inputUrl": inputUrl
}
msg.payload=temp;
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 920,
                y: 1960,
                wires: [[generateFixedId(), stationDataDebugId]]
            });

            // 进站数据获取调试节点
            barcodeNodes.push({
                id: stationDataDebugId,
                type: "debug",
                z: flowId,
                name: "进站数据获取",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 890,
                y: 2020,
                wires: []
            });

            // 进站模板节点
            const stationTemplateId = generateFixedId();
            const stationTemplateDebugId = generateFixedId();
            const stationFileId = generateFixedId();
            barcodeNodes.push({
                id: stationTemplateId,
                type: "template",
                z: flowId,
                name: "进站模板",
                field: "payload",
                fieldType: "msg",
                format: "json",
                syntax: "mustache",
                template: `{ 
    "UserName":"{{payload.userName}}",
    "ProdSN":"{{payload.LastBarcode}}",
    "Station":"{{payload.station}}",
    "ResName":"{{payload.resName}}",
    "EquCode":"{{payload.equCode}}",
    "Fixture":"{{payload.fixture}}"
} `,
                output: "json",
                x: 1200,
                y: 1960,
                wires: [[generateFixedId(), stationTemplateDebugId, stationFileId]]
            });

            // 进站json模板调试节点
            barcodeNodes.push({
                id: stationTemplateDebugId,
                type: "debug",
                z: flowId,
                name: "进站json模板",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1320,
                y: 2020,
                wires: []
            });

            // 扫码发送模板文件节点
            barcodeNodes.push({
                id: stationFileId,
                type: "file",
                z: flowId,
                name: "",
                filename: "D:\\PTI-MES\\json\\扫码发送模板.json",
                filenameType: "str",
                appendNewline: true,
                createDir: true,
                overwriteFile: "true",
                encoding: "none",
                x: 1340,
                y: 1820,
                wires: [[]]
            });

            // Change节点设置URL
            const changeNodeId = generateFixedId();
            const changeDebugId = generateFixedId();
            barcodeNodes.push({
                id: changeNodeId,
                type: "change",
                z: flowId,
                name: "",
                rules: [
                    {"t": "set", "p": "url", "pt": "msg", "to": "inputUrl", "tot": "global"},
                    {"t": "set", "p": "requestTimeout", "pt": "msg", "to": "8000", "tot": "num"}
                ],
                action: "",
                property: "",
                from: "",
                to: "",
                reg: false,
                x: 1460,
                y: 1960,
                wires: [[generateFixedId(), changeDebugId]]
            });

            // 进站url调试节点
            barcodeNodes.push({
                id: changeDebugId,
                type: "debug",
                z: flowId,
                name: "进站url",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "url",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1500,
                y: 1900,
                wires: []
            });

            // HTTP请求节点
            const httpRequestId = generateFixedId();
            const httpReturnDebugId = generateFixedId();
            const timeoutFuncId = generateFixedId();
            const returnFileId = generateFixedId();
            const jsonNodeId = generateFixedId();
            barcodeNodes.push({
                id: httpRequestId,
                type: "http request",
                z: flowId,
                name: "",
                method: "POST",
                ret: "txt",
                paytoqs: "ignore",
                url: "http://127.0.0.1:1880/Handler/EquipmentInterfacHandler/1",
                tls: "",
                persist: false,
                proxy: "",
                insecureHTTPParser: false,
                authType: "",
                senderr: false,
                headers: [{"keyType": "Content-Type", "keyValue": "", "valueType": "application/json", "valueValue": ""}],
                x: 1640,
                y: 1960,
                wires: [[httpReturnDebugId, timeoutFuncId, jsonNodeId, returnFileId]]
            });

            // 进站http返回json内容调试节点
            barcodeNodes.push({
                id: httpReturnDebugId,
                type: "debug",
                z: flowId,
                name: "进站http返回json内容",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1730,
                y: 2040,
                wires: []
            });

            // 判断是否服务器响应超时函数节点
            const timeoutSwitchId = generateFixedId();
            barcodeNodes.push({
                id: timeoutFuncId,
                type: "function",
                z: flowId,
                name: "判断是否服务器响应超时",
                func: `var requestStr=msg.payload||"";
var TimeoutFlag=0;
if (requestStr.includes("Timeout")){
    TimeoutFlag=1;
}
msg.TimeoutFlag=TimeoutFlag;
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 1730,
                y: 2200,
                wires: [[timeoutSwitchId]]
            });

            // 超时判断开关节点
            const timeoutTemplateId = generateFixedId();
            barcodeNodes.push({
                id: timeoutSwitchId,
                type: "switch",
                z: flowId,
                name: "",
                property: "TimeoutFlag",
                propertyType: "msg",
                rules: [{"t": "eq", "v": "0", "vt": "num"}, {"t": "eq", "v": "1", "vt": "num"}],
                checkall: "true",
                repair: false,
                outputs: 2,
                x: 1970,
                y: 2200,
                wires: [[], [timeoutTemplateId]]
            });

            // 超时NG模板节点
            const timeoutResponseId = generateFixedId();
            const timeoutDebugId = generateFixedId();
            barcodeNodes.push({
                id: timeoutTemplateId,
                type: "template",
                z: flowId,
                name: "NG",
                field: "payload",
                fieldType: "msg",
                format: "json",
                syntax: "mustache",
                template: `{
    "TestCancel": 1,
    "InfoText": "扫码接口请求超时，请检查服务器是否联通正常。{{{payload}}}"
}`,
                output: "json",
                x: 2170,
                y: 2200,
                wires: [[timeoutResponseId, timeoutDebugId]]
            });

            // 超时HTTP响应节点
            barcodeNodes.push({
                id: timeoutResponseId,
                type: "http response",
                z: flowId,
                name: "http",
                statusCode: "",
                headers: {},
                x: 2370,
                y: 2200,
                wires: []
            });

            // 响应超时返回调试节点
            barcodeNodes.push({
                id: timeoutDebugId,
                type: "debug",
                z: flowId,
                name: "响应超时返回PTI内容",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2230,
                y: 2160,
                wires: []
            });

            // 扫码返回模板文件节点
            barcodeNodes.push({
                id: returnFileId,
                type: "file",
                z: flowId,
                name: "",
                filename: "D:\\PTI-MES\\json\\扫码返回模板.json",
                filenameType: "str",
                appendNewline: true,
                createDir: true,
                overwriteFile: "true",
                encoding: "none",
                x: 1700,
                y: 1820,
                wires: [[]]
            });

            // JSON处理节点
            const statusSwitchId = generateFixedId();
            barcodeNodes.push({
                id: jsonNodeId,
                type: "json",
                z: flowId,
                name: "",
                property: "payload",
                action: "",
                pretty: false,
                x: 1810,
                y: 1960,
                wires: [[statusSwitchId]]
            });

            // 状态检查Switch节点
            const ngTemplateId = generateFixedId();
            
            if (enableBoardCodeReturn) {
                // 如果启用联板条码返回，使用SelectComListFlag开关
                const okSwitchId = generateFixedId();
                barcodeNodes.push({
                    id: statusSwitchId,
                    type: "switch",
                    z: flowId,
                    name: "",
                    property: "payload.ResCode",
                    propertyType: "msg",
                    rules: [{"t": "eq", "v": "0", "vt": "str"}, {"t": "else"}],
                    checkall: "true",
                    repair: false,
                    outputs: 2,
                    x: 1970,
                    y: 1960,
                    wires: [[okSwitchId], [ngTemplateId]]
                });
                
                // OK分支 - SelectComListFlag开关节点
                const processBoardCodeId = generateFixedId();
                const singleBoardTemplateId = generateFixedId();
                barcodeNodes.push({
                    id: okSwitchId,
                    type: "switch",
                    z: flowId,
                    name: "",
                    property: "SelectComListFlag",
                    propertyType: "global",
                    rules: [{"t": "true"}, {"t": "false"}],
                    checkall: "true",
                    repair: false,
                    outputs: 2,
                    x: 2050,
                    y: 1880,
                    wires: [[processBoardCodeId], [singleBoardTemplateId]]
                });

                // 处理联板条码函数节点
                const okTemplateId = generateFixedId();
                const processBoardDebugId = generateFixedId();
                barcodeNodes.push({
                    id: processBoardCodeId,
                    type: "function",
                    z: flowId,
                    name: "处理联板条码",
                    func: `// 初始化掩码和条码存储 
let skipMask = []; // 掩码将根据Data数组长度动态创建 
let barcodes = {};

// 遍历Data数组中的每一个SN对象 
msg.payload.Data.forEach((item, index) => {
    const sn = item.SN;
    const location = parseInt(item.Location, 10);
    let pos = location - 1; // 转换为0-based索引 

    // 确保位置的有效性 
    if (pos < 0 || pos >= msg.payload.Data.length) {
        return; // 忽略无效位置 
    }

    // 初始化skipMask，确保其长度与Data数组相同 
    while (skipMask.length <= pos) {
        skipMask.push('0');  // 默认值为'0'
    }

    // 解析条码 
    // 假设SN字段可以直接作为条码使用 
    const barcode = sn;

    // 记录条码 
    barcodes[pos] = barcode;
});

// 生成Action数组 
const actions = [];
actions.push(\`;cmd=test;type=skip;skip=\${skipMask.join('')};\`);  // 添加skip命令 

// 生成b1-bN的条码指令 
for (let i = 0; i < msg.payload.Data.length; i++) {
    const bn = i + 1;
    const value = barcodes[i] || '----'; // 默认填充----
    actions.push(\`;cmd=barcode;type=input;b\${bn}=\${value};\`);
}

// 将Action数组转换为JSON字符串并赋值 
msg.payload.Action = JSON.stringify(actions);

return msg;`,
                    outputs: 1,
                    timeout: 0,
                    noerr: 0,
                    initialize: "",
                    finalize: "",
                    libs: [],
                    x: 2180,
                    y: 1740,
                    wires: [[okTemplateId, processBoardDebugId]]
                });

                // 处理联板条码调试节点
                barcodeNodes.push({
                    id: processBoardDebugId,
                    type: "debug",
                    z: flowId,
                    name: "处理联板条码",
                    active: true,
                    tosidebar: true,
                    console: true,
                    tostatus: false,
                    complete: "payload",
                    targetType: "msg",
                    statusVal: "",
                    statusType: "auto",
                    x: 2270,
                    y: 1800,
                    wires: []
                });

                // OK响应模板（联板）
                const okResponseId = generateFixedId();
                barcodeNodes.push({
                    id: okTemplateId,
                    type: "template",
                    z: flowId,
                    name: "OK",
                    field: "payload",  
                    fieldType: "msg",
                    format: "json",
                    syntax: "mustache",
                    template: `{
"TestCancel": 0,
"InfoText": "",
"Action":{{{payload.Action}}}
}`,
                    output: "json",
                    x: 2470,
                    y: 1740,
                    wires: [[okResponseId]]
                });

                // OK HTTP响应节点（联板）
                barcodeNodes.push({
                    id: okResponseId,
                    type: "http response",
                    z: flowId,
                    name: "http",
                    statusCode: "",
                    headers: {},
                    x: 2670,
                    y: 1740,
                    wires: []
                });

                // 单板OK模板节点（联板模式下的单板处理）
                const singleBoardResponseId = generateFixedId();
                const singleBoardDebugId = generateFixedId();
                barcodeNodes.push({
                    id: singleBoardTemplateId,
                    type: "template",
                    z: flowId,
                    name: "OK",
                    field: "payload",
                    fieldType: "msg",
                    format: "json",
                    syntax: "mustache",
                    template: `{
"TestCancel": 0,
"InfoText": ""
}`,
                    output: "json",
                    x: 2230,
                    y: 1880,
                    wires: [[singleBoardResponseId, singleBoardDebugId]]
                });

                // 单板HTTP响应节点
                barcodeNodes.push({
                    id: singleBoardResponseId,
                    type: "http response",
                    z: flowId,
                    name: "http",
                    statusCode: "",
                    headers: {},
                    x: 2430,
                    y: 1880,
                    wires: []
                });

                // 处理单板条码调试节点
                barcodeNodes.push({
                    id: singleBoardDebugId,
                    type: "debug",
                    z: flowId,
                    name: "处理单板条码",
                    active: true,
                    tosidebar: true,
                    console: true,
                    tostatus: false,
                    complete: "payload",
                    targetType: "msg",
                    statusVal: "",
                    statusType: "auto",
                    x: 2380,
                    y: 1940,
                    wires: []
                });
                
            } else {
                // 如果不启用联板条码返回，直接生成简单的单板处理逻辑
                const singleBoardTemplateId = generateFixedId();
                barcodeNodes.push({
                    id: statusSwitchId,
                    type: "switch",
                    z: flowId,
                    name: "",
                    property: "payload.ResCode",
                    propertyType: "msg",
                    rules: [{"t": "eq", "v": "0", "vt": "str"}, {"t": "else"}],
                    checkall: "true",
                    repair: false,
                    outputs: 2,
                    x: 1970,
                    y: 1960,
                    wires: [[singleBoardTemplateId], [ngTemplateId]]
                });

                // 简单OK模板节点
                const singleBoardResponseId = generateFixedId();
                const singleBoardDebugId = generateFixedId();
                barcodeNodes.push({
                    id: singleBoardTemplateId,
                    type: "template",
                    z: flowId,
                    name: "OK",
                    field: "payload",
                    fieldType: "msg",
                    format: "json",
                    syntax: "mustache",
                    template: `{
"TestCancel": 0,
"InfoText": ""
}`,
                    output: "json",
                    x: 2230,
                    y: 1880,
                    wires: [[singleBoardResponseId, singleBoardDebugId]]
                });

                // HTTP响应节点
                barcodeNodes.push({
                    id: singleBoardResponseId,
                    type: "http response",
                    z: flowId,
                    name: "http",
                    statusCode: "",
                    headers: {},
                    x: 2430,
                    y: 1880,
                    wires: []
                });

                // 处理单板条码调试节点
                barcodeNodes.push({
                    id: singleBoardDebugId,
                    type: "debug",
                    z: flowId,
                    name: "处理单板条码",
                    active: true,
                    tosidebar: true,
                    console: true,
                    tostatus: false,
                    complete: "payload",
                    targetType: "msg",
                    statusVal: "",
                    statusType: "auto",
                    x: 2380,
                    y: 1940,
                    wires: []
                });
            }

            // NG响应模板（两种情况下都需要）
            const ngResponseId = generateFixedId();
            const ngDebugId = generateFixedId();
            barcodeNodes.push({
                id: ngTemplateId,
                type: "template",
                z: flowId,
                name: "NG",
                field: "payload",
                fieldType: "msg",
                format: "json",
                syntax: "mustache",
                template: `{
    "TestCancel": 1,
    "InfoText": "{{payload.ResMsg}}"
}`,
                output: "json",
                x: 2150,
                y: 2040,
                wires: [[ngResponseId, ngDebugId]]
            });

            // NG HTTP响应节点
            barcodeNodes.push({
                id: ngResponseId,
                type: "http response",
                z: flowId,
                name: "http",
                statusCode: "",
                headers: {},
                x: 2350,
                y: 2040,
                wires: []
            });

            // 条码异常调试节点
            barcodeNodes.push({
                id: ngDebugId,
                type: "debug",
                z: flowId,
                name: "条码异常",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2290,
                y: 2080,
                wires: []
            });

            // 更新进站数据获取函数的连接
            const stationDataNode = barcodeNodes.find(n => n.id === stationDataFuncId);
            if (stationDataNode) {
                stationDataNode.wires[0][0] = stationTemplateId;
            }

            // 更新进站模板节点的连接
            const templateNode = barcodeNodes.find(n => n.id === stationTemplateId);
            if (templateNode) {
                templateNode.wires[0][0] = changeNodeId;
            }

            // 更新Change节点的连接
            const changeNode = barcodeNodes.find(n => n.id === changeNodeId);
            if (changeNode) {
                changeNode.wires[0][0] = httpRequestId;
            }

            return barcodeNodes;
        }

        // 生成结果事件节点  
        function generateResultEventNodes(flowId) {
            function generateFixedId() {
                return Array.from({ length: 16 }, () =>
                    Math.floor(Math.random() * 16).toString(16)).join('');
            }
            
            const resultNodes = [];
            
            // 测试结果调试节点
            const testResultDebugId = generateFixedId();
            resultNodes.push({
                id: testResultDebugId,
                type: "debug",
                z: flowId,
                name: "测试结果",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 930,
                y: 2640,
                wires: []
            });

            // 出站事件调用函数节点
            const outStationFuncId = generateFixedId();
            const loopNodeId = generateFixedId();
            resultNodes.push({
                id: outStationFuncId,
                type: "function",
                z: flowId,
                name: "出站事件调用（存储boards)",
                func: `var boards = msg.payload.boards;
// @ts-ignore
global.set("boards", boards);
var outputFlag = true;
// @ts-ignore
global.set("outputFlag", outputFlag);
var outputCountFlag = false;
// @ts-ignore
global.set("outputCountFlag", outputCountFlag);
var outputMessage = "";
// @ts-ignore
global.set("outputMessage", outputMessage);
var outputRetrunData = []
// @ts-ignore
global.set("outputRetrunData", outputRetrunData);
// @ts-ignore
var userName = global.get("userName");
// @ts-ignore
var station = global.get("station");
// @ts-ignore
var resName = global.get("resName");
// @ts-ignore
var equCode = global.get("equCode");
// @ts-ignore
var fixture = global.get("fixture");

// @ts-ignore
var outputApi = global.get("outputApi");
// @ts-ignore
var Url = global.get("Url");
var outputUrl = Url + "?ReqAPI=" + outputApi;
// @ts-ignore
global.set("outputUrl", outputUrl);

var snList = [];
boards.forEach(function (element) {
    var result = "OK";
    if (element.data.TestStat.includes("Fail")) {
        result = "NG"
    }
    if (element.data.TestStat != "Skip") {
        var NGDesc = "";
        if (result == "OK") {
            NGDesc = "";
        } else {
            NGDesc = element.data.TestStat
        }
        var snOne = {
            "UserName": userName,
            "ProdSN": element.Barcode,
            "Station": station,
            "ResName": resName,
            "EquCode": equCode,
            "Fixture": fixture,
            "IsPass": result,
            "NGDesc": NGDesc,
            "FilePath": "",
            "TestDataDtl": []
        }
        let resultTempOne =
        {
            "DetectionCode": "result",
            "TestDecayTdstResults": result,
            "TestStandardValue": "0",
            "TestSetACeiling": "0",
            "TestSetALowerLimit": "0",
            "TestDeflection": "100%",
            "TestIsOK": result
        }
        snOne.TestDataDtl.push(resultTempOne);
        if (element.data.OpenFailCount != undefined) {
            if (element.data.OpenFailCount.Count != 0) {
                for (let i = 0; i < element.data.OpenFailCount.Count; i++) {
                    var Open = element.data.OpenFailCount.Pins;
                    let error =
                    {
                        "DetectionCode": Open[i],
                        "TestDecayTdstResults": "0",
                        "TestStandardValue": "0",
                        "TestSetACeiling": "0",
                        "TestSetALowerLimit": "0",
                        "TestDeflection": "100%",
                        "TestIsOK": "NG"
                    }
                    snOne.TestDataDtl.push(error);
                }
            }
        }
        if (element.data.ShortFailCount != undefined) {
            if (element.data.ShortFailCount.Count != 0) {
                for (let i = 0; i < element.data.ShortFailCount.Count; i++) {
                    var Short = element.data.ShortFailCount.Pins
                    let error = {
                        "DetectionCode": Short[i],
                        "TestDecayTdstResults": "0",
                        "TestStandardValue": "0",
                        "TestSetACeiling": "0",
                        "TestSetALowerLimit": "0",
                        "TestDeflection": "100%",
                        "TestIsOK": "NG"
                    }
                    snOne.TestDataDtl.push(error);
                }
            }
        } if (element.data.componentData != undefined) {
            element.data.componentData.forEach(function (data) {
                if (data.Result != "Skip") {
                        var comResult = "OK"
                        if (data.Result == "Fail") {
                            comResult = "NG"
                        }
                        var TestStandardValue = "0";
                        if (data.STDval != "") {
                            TestStandardValue = data.STDval;
                        } else if (data.ACTval != "") {
                            TestStandardValue = data.ACTval;
                        }
                        let error =
                        {
                            "DetectionCode": data.Device,
                            "TestDecayTdstResults": data.TestVal,
                            "TestStandardValue": TestStandardValue,
                            "TestSetACeiling": data.plusPercent,
                            "TestSetALowerLimit": data.minusPercent,
                            "TestDeflection": data.DevPercent,
                            "TestIsOK": comResult
                        }
                        snOne.TestDataDtl.push(error);
                }
            });
        }

        snList.push(snOne);

    }
});
msg.payload.snList = snList;
// @ts-ignore
global.set("snList", snList);
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 980,
                y: 2700,
                wires: [[loopNodeId]]
            });

            // Loop控制节点
            const stationDataGetId = generateFixedId();
            const processLoopResultId = generateFixedId();
            resultNodes.push({
                id: loopNodeId,
                type: "loop",
                z: flowId,
                name: "循环控制boards",
                kind: "enum",
                count: "",
                initial: "1",
                step: "1",
                condition: "",
                conditionType: "js",
                when: "before",
                enumeration: "snList",
                enumerationType: "global",
                limit: "50000",
                loopPayload: "loop-index",             
                finalPayload: "final-last",
                x: 1350,
                y: 2700,
                wires: [[processLoopResultId], [stationDataGetId]]
            });

            // 过站数据获取函数
            const stationDataDebugId = generateFixedId();
            const uploadTemplateId = generateFixedId();
            resultNodes.push({
                id: stationDataGetId,
                type: "function",
                z: flowId,
                name: "过站数据获取",
                func: `var outputIndex =msg.payload;

// @ts-ignore
global.set("outputIndex", outputIndex);
// @ts-ignore
var snList=global.get("snList");
var snListoutputIndex =snList[outputIndex]
var temp={
    "snListoutputIndex": JSON.stringify(snListoutputIndex)
}
msg.payload=temp;
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 970,
                y: 2960,
                wires: [[uploadTemplateId, stationDataDebugId]]
            });

            // 过站发送的数据内容调试节点
            resultNodes.push({
                id: stationDataDebugId,
                type: "debug",
                z: flowId,
                name: "过站发送的数据内容",
                active: false,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 950,
                y: 3060,
                wires: []
            });

            // 过站上传模板
            const uploadDebugId = generateFixedId();
            const uploadFileId = generateFixedId();
            const modifyApiUrlId = generateFixedId();
            resultNodes.push({
                id: uploadTemplateId,
                type: "template",
                z: flowId,
                name: "过站上传模板",
                field: "payload",
                fieldType: "msg",
                format: "handlebars",
                syntax: "mustache",
                template: "{{{payload.snListoutputIndex}}}\n",
                output: "json",
                x: 1210,
                y: 2960,
                wires: [[uploadDebugId, uploadFileId, modifyApiUrlId]]
            });

            // 过站发送的数据json模板调试节点
            resultNodes.push({
                id: uploadDebugId,
                type: "debug",
                z: flowId,
                name: "过站发送的数据json模板",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1230,
                y: 3060,
                wires: []
            });

            // 过站发送文件节点
            resultNodes.push({
                id: uploadFileId,
                type: "file",
                z: flowId,
                name: "",
                filename: "D:\\PTI-MES\\json\\过站发送.json",
                filenameType: "str",
                appendNewline: true,
                createDir: true,
                overwriteFile: "true",
                encoding: "none",
                x: 1210,
                y: 3140,
                wires: [[]]
            });

            // 修改API输出URL函数
            const changeOutputUrlId = generateFixedId();
            resultNodes.push({
                id: modifyApiUrlId,
                type: "function",
                z: flowId,
                name: "修改apiOutputUrl",
                func: `
// @ts-ignore
var Url = global.get("Url");

// @ts-ignore
var outputApi = global.get("outputApi");
var outputUrl = Url + "?ReqAPI=" + outputApi;
// @ts-ignore
global.set("outputUrl", outputUrl);
// @ts-ignore
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 1460,
                y: 2960,
                wires: [[changeOutputUrlId]]
            });

            // Change节点设置输出URL
            const httpOutputRequestId = generateFixedId();
            const urlDebugId = generateFixedId();
            resultNodes.push({
                id: changeOutputUrlId,
                type: "change",
                z: flowId,
                name: "",
                rules: [
                    {"t": "set", "p": "url", "pt": "msg", "to": "outputUrl", "tot": "global"},
                    {"t": "set", "p": "requestTimeout", "pt": "msg", "to": "8000", "tot": "num"}
                ],
                action: "",
                property: "",
                from: "",
                to: "",
                reg: false,
                x: 1720,
                y: 2960,
                wires: [[httpOutputRequestId, urlDebugId]]
            });

            // 过站url调试节点
            resultNodes.push({
                id: urlDebugId,
                type: "debug",
                z: flowId,
                name: "过站url",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "url",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1690,
                y: 2880,
                wires: []
            });

            // HTTP请求节点（输出）
            const httpReturnDebugId = generateFixedId();
            const timeoutFuncId = generateFixedId();
            const jsonOutputId = generateFixedId();
            const responseFileId = generateFixedId();
            resultNodes.push({
                id: httpOutputRequestId,
                type: "http request",
                z: flowId,
                name: "",
                method: "POST",
                ret: "txt",
                paytoqs: "ignore",
                url: "",
                tls: "",
                persist: false,
                proxy: "",
                insecureHTTPParser: false,
                authType: "",
                senderr: false,
                headers: [{"keyType": "Content-Type", "keyValue": "", "valueType": "application/json", "valueValue": ""}],
                x: 1890,
                y: 2960,
                wires: [[jsonOutputId, httpReturnDebugId, timeoutFuncId, responseFileId]]
            });

            // 过站上传http返回数据调试节点
            resultNodes.push({
                id: httpReturnDebugId,
                type: "debug",
                z: flowId,
                name: "过站上传http返回数据",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2000,
                y: 2820,
                wires: []
            });

            // 判断是否服务器响应超时函数节点
            const timeoutSwitchId = generateFixedId();
            resultNodes.push({
                id: timeoutFuncId,
                type: "function",
                z: flowId,
                name: "判断是否服务器响应超时",
                func: `var requestStr=msg.payload;
var TimeoutFlag=0;
if (requestStr.includes("Timeout")){
    TimeoutFlag=1;
}
msg.TimeoutFlag=TimeoutFlag;
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 1870,
                y: 3060,
                wires: [[timeoutSwitchId]]
            });

            // 超时判断开关节点
            const timeoutTemplateId = generateFixedId();
            resultNodes.push({
                id: timeoutSwitchId,
                type: "switch",
                z: flowId,
                name: "",
                property: "TimeoutFlag",
                propertyType: "msg",
                rules: [{"t": "eq", "v": "0", "vt": "num"}, {"t": "eq", "v": "1", "vt": "num"}],
                checkall: "true",
                repair: false,
                outputs: 2,
                x: 2080,
                y: 3060,
                wires: [[], [timeoutTemplateId]]
            });

            // 超时NG模板节点
            const timeoutResponseId = generateFixedId();
            const timeoutDebugId = generateFixedId();
            resultNodes.push({
                id: timeoutTemplateId,
                type: "template",
                z: flowId,
                name: "NG",
                field: "payload",
                fieldType: "msg",
                format: "handlebars",
                syntax: "mustache",
                template: `{
"TestCancel": 1,
"InfoText": "出站接口请求超时，请检查服务器是否联通正常。{{{payload}}}"
}`,
                output: "str",
                x: 2280,
                y: 3060,
                wires: [[timeoutResponseId, timeoutDebugId]]
            });

            // 超时HTTP响应节点
            resultNodes.push({
                id: timeoutResponseId,
                type: "http response",
                z: flowId,
                name: "http",
                statusCode: "",
                headers: {},
                x: 2480,
                y: 3060,
                wires: []
            });

            // 响应超时返回调试节点
            resultNodes.push({
                id: timeoutDebugId,
                type: "debug",
                z: flowId,
                name: "响应超时返回PTI内容",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2340,
                y: 3020,
                wires: []
            });

            // 过站响应文件节点
            resultNodes.push({
                id: responseFileId,
                type: "file",
                z: flowId,
                name: "",
                filename: "D:\\PTI-MES\\json\\过站响应.json",
                filenameType: "str",
                appendNewline: true,
                createDir: true,
                overwriteFile: "true",
                encoding: "none",
                x: 1830,
                y: 3200,
                wires: [[]]
            });

            // JSON处理节点（输出）
            const httpJsonDebugId = generateFixedId();
            const storeOutputDataId = generateFixedId();
            resultNodes.push({
                id: jsonOutputId,
                type: "json",
                z: flowId,
                name: "",
                property: "payload",
                action: "",
                pretty: false,
                x: 2140,
                y: 2960,
                wires: [[httpJsonDebugId, storeOutputDataId]]
            });

            // 过站上传http返回数据json格式调试节点
            resultNodes.push({
                id: httpJsonDebugId,
                type: "debug",
                z: flowId,
                name: "过站上传http返回数据json格式",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2370,
                y: 2820,
                wires: []
            });

            // 存储并记录outputRetrunData函数
            const outputDataDebugId = generateFixedId();
            resultNodes.push({
                id: storeOutputDataId,
                type: "function",
                z: flowId,
                name: "存储并记录outputRetrunData",
                func: `// @ts-ignore
var outputIndex =global.get("outputIndex");
// @ts-ignore
var outputRetrunData = global.get("outputRetrunData");
var data=msg.payload;
outputRetrunData[outputIndex] = data;
// @ts-ignore
global.set("outputRetrunData", outputRetrunData);
// @ts-ignore
var BoardCount = global.get("BoardCount");

msg.payload=outputRetrunData;
return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 2570,
                y: 2960,
                wires: [[loopNodeId, outputDataDebugId]]
            });

            // outputRetrunData调试节点
            resultNodes.push({
                id: outputDataDebugId,
                type: "debug",
                z: flowId,
                name: "outputRetrunData",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2790,
                y: 3040,
                wires: []
            });

            // 过站处理循环结果函数
            const processResultDebugId = generateFixedId();
            const outputResultSwitchId = generateFixedId();
            resultNodes.push({
                id: processLoopResultId,
                type: "function",
                z: flowId,
                name: "过站处理循环结果",
                func: `// @ts-ignore
var outputRetrunData = global.get("outputRetrunData") || [];
var output = true;
var outputMesg = "";
outputRetrunData.forEach(function(element) {
    if(element.ResCode!=0){
        output=false;
        outputMesg+=element.ResMsg+"\\n";
    }
});
if(output==true){
    outputMesg = "所有检查通过"
}
msg.payload = {
    "output": output,
    "outputMesg": outputMesg,
    "data": outputRetrunData // 根据需要调整返回的数据结构
};

return msg;`,
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 2620,
                y: 2640,
                wires: [[processResultDebugId, outputResultSwitchId]]
            });

            // 过站处理循环结果调试节点
            resultNodes.push({
                id: processResultDebugId,
                type: "debug",
                z: flowId,
                name: "过站处理循环结果",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2870,
                y: 2480,
                wires: []
            });

            // 输出结果Switch节点
            const okSuccessTemplateId = generateFixedId();
            const ngFailTemplateId = generateFixedId();
            resultNodes.push({
                id: outputResultSwitchId,
                type: "switch",
                z: flowId,
                name: "",
                property: "payload.output",
                propertyType: "msg",
                rules: [{"t": "true"}, {"t": "false"}],
                checkall: "true",
                repair: false,
                outputs: 2,
                x: 2920,
                y: 2640,
                wires: [[okSuccessTemplateId], [ngFailTemplateId]]
            });

            // OK成功响应模板
            const httpSuccessResponseId = generateFixedId();
            const successDebugId = generateFixedId();
            resultNodes.push({
                id: okSuccessTemplateId,
                type: "template",
                z: flowId,
                name: "OK",
                field: "payload",
                fieldType: "msg",
                format: "handlebars",
                syntax: "mustache",
                template: `{
"TestCancel": 0,
"InfoText": "",
}`,
                output: "str",
                x: 3190,
                y: 2560,
                wires: [[successDebugId, httpSuccessResponseId]]
            });

            // 过站成功调试节点
            resultNodes.push({
                id: successDebugId,
                type: "debug",
                z: flowId,
                name: "过站成功",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 3340,
                y: 2460,
                wires: []
            });

            // HTTP响应节点（成功）
            resultNodes.push({
                id: httpSuccessResponseId,
                type: "http response",
                z: flowId,
                name: "http",
                statusCode: "",
                headers: {},
                x: 3580,
                y: 2540,
                wires: []
            });

            // NG失败响应模板
            const failDebugId = generateFixedId();
            const httpFailResponseId = generateFixedId();
            resultNodes.push({
                id: ngFailTemplateId,
                type: "template",
                z: flowId,
                name: "NG",
                field: "payload",
                fieldType: "msg",
                format: "handlebars",
                syntax: "mustache",
                template: `{
"TestCancel": 0,
"InfoText": "{{payload.outputMesg}}"
}`,
                output: "str",
                x: 3180,
                y: 2680,
                wires: [[failDebugId, httpFailResponseId]]
            });

            // 过站失败调试节点
            resultNodes.push({
                id: failDebugId,
                type: "debug",
                z: flowId,
                name: "过站失败",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 3340,
                y: 2800,
                wires: []
            });

            // HTTP响应节点（失败）
            resultNodes.push({
                id: httpFailResponseId,
                type: "http response",
                z: flowId,
                name: "http",
                statusCode: "",
                headers: {},
                x: 3580,
                y: 2680,
                wires: []
            });

            return resultNodes;
        }
 
        function generateSetFunction(key) {
            return `// @ts-ignore 
var data = msg.payload;   
if(data!=""){
    // @ts-ignore 
    global.set("${key}",  data)
    var parm = {
        "${key}": data,
    }
    // @ts-ignore 
    msg.payload  = parm;
}
return msg;`;
        }
 
        function generateSummaryFunction(fields, enableBasicFlow, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn) {
            let func = "\n// @ts-ignore\n";
            fields.forEach(field  => {
                func += `var ${field.key}  = global.get("${field.key}")\n`;  
            });
 
            func += "\nvar parm = {\n";
            func += `    "enableBasicFlow": ${enableBasicFlow},\n`;
            func += `    "enableBarcodeEvent": ${enableBarcodeEvent},\n`;
            func += `    "enableResultEvent": ${enableResultEvent},\n`;
            func += `    "enableBoardCodeReturn": ${enableBoardCodeReturn},\n`;
            fields.forEach(field  => {
                func += `    "${field.key}":${field.key},\n`;  
            });
            func += "}\nmsg.payload=parm\nreturn  msg;";
 
            return func;
        }
 
        function generateStoreFunction(fields, enableBasicFlow, enableBarcodeEvent, enableResultEvent, enableBoardCodeReturn) {
            let func = "\n// @ts-ignore\n";
            fields.forEach(field  => {
                func += `global.set("${field.key}",  msg.payload.${field.key});\n`;  
            });
            func += `global.set("enableBasicFlow", ${enableBasicFlow});\n`;
            func += `global.set("enableBarcodeEvent", ${enableBarcodeEvent});\n`;
            func += `global.set("enableResultEvent", ${enableResultEvent});\n`;
            func += `global.set("enableBoardCodeReturn", ${enableBoardCodeReturn});\n`;
            return func + "\nreturn msg;";
        }
    }
    RED.nodes.registerType("pti-flow-generator",  PtiFlowGeneratorNode);
};