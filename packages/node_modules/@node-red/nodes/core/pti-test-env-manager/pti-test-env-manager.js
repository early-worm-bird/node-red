module.exports  = function(RED) {
    function PtiFlowGeneratorNode(config) {
        RED.nodes.createNode(this,  config);
        var node = this;
        
        node.on('input',  function(msg) {
            try {
                // Get configuration from node properties 
                var dashboardTabName = config.dashboardTabName  || "PTI Config";
                var dashboardGroupName = config.dashboardGroupName  || "PTI Settings";
                
                // Parse input fields (compatible with both stringified JSON and direct object)
                var inputFields;
                if (typeof config.inputFields  === 'string') {
                    try {
                        inputFields = JSON.parse(config.inputFields); 
                    } catch (e) {
                        inputFields = [
                            { name: "设备状态上传Url", key: "DevStatusUrl" },
                            { name: "拼版码查询Url", key: "copyUrl" }
                        ];
                    }
                } else if (Array.isArray(config.inputFields))  {
                    inputFields = config.inputFields; 
                } else {
                    inputFields = [
                        { name: "设备状态上传Url", key: "DevStatusUrl" },
                        { name: "拼版码查询Url", key: "copyUrl" }
                    ];
                }
                
                // Ensure inputFields is an array with proper structure 
                if (!Array.isArray(inputFields))  {
                    inputFields = [
                        { name: "设备状态上传Url", key: "DevStatusUrl" },
                        { name: "拼版码查询Url", key: "copyUrl" }
                    ];
                } else {
                    // Filter out invalid entries 
                    inputFields = inputFields.filter(field  => 
                        field && typeof field === 'object' && 
                        field.name  && field.key  
                    );
                }
                
                // Generate the flow 
                var flow = generateNodeRedFlow(dashboardTabName, dashboardGroupName, inputFields);
                
                // Output the generated flow 
                msg.payload  = flow;
                node.send(msg);  
                
            } catch (err) {
                node.error("Error  generating flow: " + err, msg);
            }
        });
        
        // Function to generate the Node-RED flow 
        function generateNodeRedFlow(dashboardTabName, dashboardGroupName, inputFields) {
            function generateFixedId() {
                return Array.from({  length: 16 }, () =>
                    Math.floor(Math.random()  * 16).toString(16)).join('');
            }
 
            const tabId = generateFixedId();
            const groupId = generateFixedId();
            const flowId = generateFixedId();
 
            // Create base nodes 
            const nodes = [
                // UI Tab 
                {
                    id: tabId,
                    type: "ui_tab",
                    name: dashboardTabName,
                    icon: "dashboard",
                    disabled: false,
                    hidden: false 
                },
                // UI Group 
                {
                    id: groupId,
                    type: "ui_group",
                    name: dashboardGroupName,
                    tab: tabId,
                    order: 1,
                    disp: true,
                    width: "24",
                    collapse: false,
                    className: ""
                }
            ];
 
            // Create save button 
            const buttonId = generateFixedId();
            const summaryId = generateFixedId();
            const debugSaveId = generateFixedId();
            const fileId = generateFixedId();
            const debugSummaryId = generateFixedId();
 
            nodes.push({  
                id: buttonId,
                type: "ui_button",
                z: flowId,
                name: "",
                group: groupId,
                order: 29,
                width: 24,
                height: 1,
                passthru: false,
                label: "保存",
                tooltip: "",
                color: "",
                bgcolor: "",
                className: "",
                icon: "",
                payload: "",
                payloadType: "str",
                topic: "topic",
                topicType: "msg",
                x: 1030,
                y: 660,
                wires: [[summaryId, debugSaveId]]
            });
 
            // Data summary node 
            nodes.push({  
                id: summaryId,
                type: "function",
                z: flowId,
                name: "数据汇总",
                func: generateSummaryFunction(inputFields),
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 1200,
                y: 660,
                wires: [[fileId, debugSummaryId]]
            });
 
            // Debug nodes 
            nodes.push({  
                id: debugSaveId,
                type: "debug",
                z: flowId,
                name: "保存完成",
                active: true,
                tosidebar: true,
                console: false,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1110,
                y: 740,
                wires: []
            });
 
            nodes.push({  
                id: debugSummaryId,
                type: "debug",
                z: flowId,
                name: "数据汇总",
                active: true,
                tosidebar: true,
                console: false,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1410,
                y: 580,
                wires: []
            });
 
            // File node 
            const fileInId = generateFixedId();
            nodes.push({  
                id: fileId,
                type: "file",
                z: flowId,
                name: "",
                filename: "PtiTestEnv",
                filenameType: "str",
                appendNewline: true,
                createDir: true,
                overwriteFile: "true",
                encoding: "none",
                x: 1390,
                y: 660,
                wires: [[fileInId]]
            });
 
            // Create input fields and related nodes 
            inputFields.forEach((field,  index) => {
                const inputId = generateFixedId();
                const functionId = generateFixedId();
                const debugId = generateFixedId();
 
                const order = (index + 1) * 2 + 2;
 
                // Input field 
                nodes.push({  
                    id: inputId,
                    type: "ui_text_input",
                    z: flowId,
                    name: "",
                    label: `${field.name}(${field.key})`,  
                    tooltip: "",
                    group: groupId,
                    order: order,
                    width: 12,
                    height: 1,
                    passthru: false,
                    mode: "text",
                    delay: 300,
                    topic: "payload",
                    sendOnBlur: false,
                    className: "",
                    topicType: "msg",
                    x: 490 + index * 20,
                    y: 560 + index * 120,
                    wires: [[debugId, functionId]]
                });
 
                // Function node 
                nodes.push({  
                    id: functionId,
                    type: "function",
                    z: flowId,
                    name: "参数设定",
                    func: generateSetFunction(field.key),  
                    outputs: 1,
                    timeout: 0,
                    noerr: 0,
                    initialize: "",
                    finalize: "",
                    libs: [],
                    x: 680 + index * 40,
                    y: 560 + index * 120,
                    wires: [[buttonId]]
                });
 
                // Debug node 
                nodes.push({  
                    id: debugId,
                    type: "debug",
                    z: flowId,
                    name: `${field.name}(${field.key})`,  
                    active: true,
                    tosidebar: true,
                    console: false,
                    tostatus: false,
                    complete: "payload",
                    targetType: "msg",
                    statusVal: "",
                    statusType: "auto",
                    x: 630 + index * 20,
                    y: 500 + index * 120,
                    wires: []
                });
            });
 
            // Create initialization nodes 
            const injectId = generateFixedId();
            const clearId = generateFixedId();
            const completeId = generateFixedId();
 
            nodes.push({  
                id: injectId,
                type: "inject",
                z: flowId,
                name: "",
                props: [{ p: "payload" }, { p: "topic", vt: "str" }],
                repeat: "",
                crontab: "",
                once: true,
                onceDelay: 0.1,
                topic: "",
                payload: "",
                payloadType: "date",
                x: 80,
                y: 660,
                wires: [[clearId]]
            });
 
            nodes.push({  
                id: clearId,
                type: "function",
                z: flowId,
                name: "至空",
                func: "msg.payload=\"\"\nreturn  msg;",
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 230,
                y: 660,
                wires: [inputFields.map((_, i) => nodes.find(n  => n.type  === "ui_text_input" && n.order  === (i + 1) * 2 + 2).id)]
            });
 
            // Complete node 
            nodes.push({  
                id: completeId,
                type: "complete",
                z: flowId,
                name: "（数据汇总）之后，清空数据",
                scope: [debugSummaryId],
                uncaught: false,
                x: 120,
                y: 740,
                wires: [[clearId]]
            });
 
            // File reading nodes 
            const debugFileId = generateFixedId();
            const jsonId = generateFixedId();
            const debugParsedId = generateFixedId();
 
            nodes.push({  
                id: fileInId,
                type: "file in",
                z: flowId,
                name: "",
                filename: "PtiTestEnv",
                filenameType: "str",
                format: "utf8",
                chunk: false,
                sendError: false,
                encoding: "none",
                allProps: false,
                x: 1770,
                y: 660,
                wires: [[jsonId]]
            });
 
            // Create UI text display nodes 
            const uiTextNodes = inputFields.map((field,  index) => {
                const textId = generateFixedId();
                return {
                    id: textId,
                    type: "ui_text",
                    z: flowId,
                    group: groupId,
                    order: (index + 1) * 2 + 1,
                    width: 12,
                    height: 1,
                    name: "",
                    label: `${field.name}(${field.key})`,  
                    format: `{{msg.payload.${field.key}}}`,  
                    layout: "row-spread",
                    className: "",
                    style: false,
                    font: "",
                    fontSize: 16,
                    color: "#000000",
                    x: 2670,
                    y: 660 + index * 60,
                    wires: []
                };
            });
 
            nodes.push(...uiTextNodes);  
 
            nodes.push({  
                id: jsonId,
                type: "json",
                z: flowId,
                name: "",
                property: "payload",
                action: "",
                pretty: false,
                x: 2170,
                y: 660,
                wires: [uiTextNodes.map(n => n.id).concat([debugParsedId])]  
            });
 
            // Parameter storage function 
            const storeFuncId = generateFixedId();
            nodes.push({  
                id: storeFuncId,
                type: "function",
                z: flowId,
                name: "参数存储",
                func: generateStoreFunction(inputFields),
                outputs: 1,
                timeout: 0,
                noerr: 0,
                initialize: "",
                finalize: "",
                libs: [],
                x: 2640,
                y: 540,
                wires: [[]]
            });
 
            // Debug nodes 
            nodes.push({  
                id: debugFileId,
                type: "debug",
                z: flowId,
                name: "config.txt",  
                active: true,
                tosidebar: true,
                console: false,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 1820,
                y: 780,
                wires: []
            });
 
            nodes.push({  
                id: debugParsedId,
                type: "debug",
                z: flowId,
                name: "config解析后数据",
                active: true,
                tosidebar: true,
                console: true,
                tostatus: false,
                complete: "payload",
                targetType: "msg",
                statusVal: "",
                statusType: "auto",
                x: 2670,
                y: 780,
                wires: []
            });
 
            // Manual trigger inject node 
            const inject2Id = generateFixedId();
            nodes.push({  
                id: inject2Id,
                type: "inject",
                z: flowId,
                name: "手动读取文件",
                props: [{ p: "payload" }, { p: "topic", vt: "str" }],
                repeat: "",
                crontab: "",
                once: false,
                onceDelay: 0.1,
                topic: "",
                payload: "",
                payloadType: "date",
                x: 1480,
                y: 760,
                wires: [[fileInId]]
            });
 
            // Update JSON node wires 
            const jsonNode = nodes.find(n  => n.id  === jsonId);
            jsonNode.wires[0].push(storeFuncId);  
 
            return nodes;
        }
 
        function generateSetFunction(key) {
            return `// @ts-ignore 
var data = msg.payload;   
if(data!=""){
    // @ts-ignore 
    global.set("${key}",  data)
    var parm = {
        "${key}": data,
    }
    // @ts-ignore 
    msg.payload  = parm;
}
return msg;`;
        }
 
        function generateSummaryFunction(fields) {
            let func = "\n// @ts-ignore\n";
            fields.forEach(field  => {
                func += `var ${field.key}  = global.get("${field.key}")\n`;  
            });
 
            func += "\nvar parm = {\n";
            fields.forEach(field  => {
                func += `    "${field.key}":${field.key},\n`;  
            });
            func += "}\nmsg.payload=parm\nreturn  msg;";
 
            return func;
        }
 
        function generateStoreFunction(fields) {
            let func = "\n// @ts-ignore\n";
            fields.forEach(field  => {
                func += `global.set("${field.key}",  msg.payload.${field.key});\n`;  
            });
            return func + "\nreturn msg;";
        }
    }
    RED.nodes.registerType("pti-flow-generator",  PtiFlowGeneratorNode);
};