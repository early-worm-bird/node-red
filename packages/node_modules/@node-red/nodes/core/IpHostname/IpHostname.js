const os = require('os');

module.exports = function(RED) {
    function IpHostnameNode(config) {
        RED.nodes.createNode(this, config);
        var node = this;

        node.on("input", function(msg) {
            try {
                // 获取网络接口信息（只执行一次）
                const interfaces = os.networkInterfaces();
                
                // 获取 IPv4 地址
                let ipAddress = null;
                for (const devName in interfaces) {
                    let found = false;
                    for (const addrInfo of interfaces[devName]) {
                        if (addrInfo.family === 'IPv4' && !addrInfo.internal) {
                            ipAddress = addrInfo.address;
                            found = true;
                            break;
                        }
                    }
                    if (found) break;
                }

                // 获取主机名
                const hostname = os.hostname();

                // 获取 MAC 地址（带去重和过滤）
                const macAddresses = [];
                const processed = new Set(); // 接口去重
                for (const interfaceName in interfaces) {
                    if (processed.has(interfaceName)) continue;
                    
                    for (const addrInfo of interfaces[interfaceName]) {
                        if (addrInfo.mac && 
                            addrInfo.mac !== '00:00:00:00:00:00' &&
                            !interfaceName.startsWith('docker') && // 过滤 Docker
                            !interfaceName.startsWith('veth')     // 过滤虚拟接口
                        ) {
                            macAddresses.push({
                                interface: interfaceName,
                                mac: addrInfo.mac
                            });
                            processed.add(interfaceName);
                            break; // 每个接口只取一个 MAC
                        }
                    }
                }

                // 构建输出结构
                msg.payload = {
                    ip: ipAddress,
                    hostname: hostname,
                    mac: macAddresses
                };

                node.send(msg);
            } catch (error) {
                node.error("处理错误: " + error.message, msg);
            }
        });
    }

    RED.nodes.registerType("IpHostname", IpHostnameNode);
};