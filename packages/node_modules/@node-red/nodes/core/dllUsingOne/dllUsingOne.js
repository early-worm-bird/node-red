module.exports = function(RED) {
    function dllUsingOneNode(config) {
        RED.nodes.createNode(this,config);
        var node = this;
        node.on('input', function(msg) {
            let cSharpCode = ''
                            //msg.payload.params   {method:"",line:"",XX:""}
                            const inputData = msg.payload
                            if(inputData.method == "Ping_NetWork"){
                                cSharpCode= `
                                using AdayoMes;
                                async (input) => {
                                  var mesConn=new MesConn();
                                  var result=mesConn.Ping_NetWork();
                                  return result;
                                }
                                `
                            }
                            else if (inputData.method == "Mes_Barcode_Check_Ford"){
                                cSharpCode= `
                                using AdayoMes;
                                using System;
                                    async (input) => {
                                        var mesConn=new MesConn();
                                        string Message = "";
                                        string VerifyString = "";
                                    try
                                    {
                                        var result=mesConn.Mes_Barcode_Check_Ford("${inputData.line}","${inputData.procno}","${inputData.SerialNumber}",out Message,out VerifyString);
                                        if(result==true){
                                            return "true" + "," +Message + "," + VerifyString;
                                        }else{
                                            return "false" + "," +Message + "," + VerifyString;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        return ex.Message;
                                    }    
                                }
                                `
                            }
                            else if (inputData.method == "Product_TestData_Upload_Ford"){
                                var jsonInput = JSON.stringify(inputData.data.jsonInput);
                                var escapedJsonString = jsonInput.replace(/"/g, '\\"');
                                node.log(escapedJsonString);
                                cSharpCode= `
                                using AdayoMes;
                                using System;
                                    async (input) => {
                                        var mesConn=new MesConn();
                                        var Message = "";
                                        var jsonInput="${escapedJsonString}";
                                    try
                                    {

                                        var result=mesConn.Product_TestData_Upload_Ford("${inputData.verifyString}",jsonInput,out Message);
                                        if(result==true){
                                            return "true" + "," +Message;
                                        }else{
                                            return "false" + "," +Message;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        return ex.Message;
                                    }    
                                }
                                `
                                
                            }


            require('edge-js').func({

                source: cSharpCode,
                references: config.references.split("\n")
            })(msg.payload, (err, result) => {
                if (err) return node.error(err, msg);
                msg.payload = result;
                node.send(msg);
            });
        });
    }
    RED.nodes.registerType("dllUsingOne",dllUsingOneNode);
}
