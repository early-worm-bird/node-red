module.exports = function (RED) {
    function pti816dataNode(config) {
        RED.nodes.createNode(this, config);
        var node = this;
        node.on("input", function (msg) {
            try {


                node.log("接收数据");
                const url = msg.req.url;
                node.log(url);
                const eventKey = "Event";
                const searchParams = new URLSearchParams(url.split("?")[1]);
                node.log(searchParams);
                const text = searchParams.get(eventKey);
                //node.log(text);
                if (text == "Barcode") {
                    node.log("输入条码");
                    //*******测试开始的数据分析开始**********
                    const result = {};
                    const custom = [];
                    const boards = [];
                    const data = msg.payload;
                    // const iconv = require('iconv-lite');
                    // const gb2312data = msg.payload;
                    // const data = iconv.decodeStream(gb2312data, 'gb2312');

                    //node.log(data);
                    //按分行符分割数据
                    const lines = data.split('\n').map(line => line.trim());

                    //按等号分割成key：value
                    lines.forEach(line => {
                        const [key, value] = line.split(' = ');
                        if (key.startsWith('_')) {
                            const newKey = key.slice(1);
                            custom.push({ [newKey]: value || "" });
                        } else if (key.startsWith('/') || key === "" || key === null || key === undefined) {

                        } else if (key.startsWith('B') && !isNaN(parseInt(key[1]))) {
                            const boardIndex = parseInt(key[1]) - 1;
                            if (!boards[boardIndex]) {
                                boards[boardIndex] = { ID: "B" + (boardIndex + 1), Barcode: '', Pass: 0, data: {} };
                            }
                            if (key == "B" + (boardIndex + 1) + ".Barcode") {
                                boards[boardIndex].Barcode = value || "";
                            }
                            if (key == "B" + (boardIndex + 1) + ".Pass") {
                                boards[boardIndex].Pass = value || "";
                            }
                        }
                        else {
                            if (key.endsWith('=')) {
                                result[key.slice(0, -1)] = value || "";
                            } else {
                                result[key] = value || "";
                            }
                        }
                    });
                    result["custom"] = custom;
                    result["boards"] = boards;
                    msg.payload = result;
                    node.send([msg, null, null, null]);
                    //*******测试开始的数据分析结束**********
                } else if (text == "TestStart") {
                    node.log("测试开始");
                    //*******测试开始的数据分析开始**********
                    const result = {};
                    const custom = [];
                    const boards = [];
                    const data = msg.payload;
                    // const iconv = require('iconv-lite');
                    // const gb2312data = msg.payload;
                    // const data = iconv.decodeStream(gb2312data, 'gb2312');

                    //node.log(data);
                    //按分行符分割数据
                    const lines = data.split('\n').map(line => line.trim());

                    //按等号分割成key：value
                    lines.forEach(line => {
                        const [key, value] = line.split(' = ');
                        if (key.startsWith('_')) {
                            const newKey = key.slice(1);
                            custom.push({ [newKey]: value || "" });
                        } else if (key.startsWith('/') || key === "" || key === null || key === undefined) {

                        } else if (key.startsWith('B') && !isNaN(parseInt(key[1]))) {
                            const boardIndex = parseInt(key[1]) - 1;
                            if (!boards[boardIndex]) {
                                boards[boardIndex] = { ID: "B" + (boardIndex + 1), Barcode: '', Pass: 0, data: {} };
                            }
                            if (key == "B" + (boardIndex + 1) + ".Barcode") {
                                boards[boardIndex].Barcode = value || "";
                            }
                            if (key == "B" + (boardIndex + 1) + ".Pass") {
                                boards[boardIndex].Pass = value || "";
                            }
                        }
                        else {
                            if (key.endsWith('=')) {
                                result[key.slice(0, -1)] = value || "";
                            } else {
                                result[key] = value || "";
                            }
                        }
                    });
                    result["custom"] = custom;
                    result["boards"] = boards;
                    msg.payload = result;
                    node.send([null, msg, null, null]);
                    //*******测试开始的数据分析结束**********
                } else if (text == "TestDone") {
                    node.log("测试完成");
                    //*******测试结果的数据分析开始**********
                    const result = {};
                    const custom = [];
                    const boards = [];
                    const data = msg.payload;
                    //按分行符分割数据
                    const lines = data.split('\n').map(line => line.trim());

                    //按等号分割成key：value
                    lines.forEach(line => {
                        const [key, value] = line.split(' = ');
                        if (key.startsWith('_')) {
                            const newKey = key.slice(1);
                            custom.push({ [newKey]: value || "" });
                        } else if (key.startsWith('/') || key === "" || key === null || key === undefined) {

                        } else if (key.startsWith('B') && !isNaN(parseInt(key[1]))) {
                            const boardIndex = parseInt(key[1]) - 1;
                            if (!boards[boardIndex]) {
                                boards[boardIndex] = { ID: "B" + (boardIndex + 1), Barcode: '', Pass: 0, data: {} };
                            }
                            if (key == "B" + (boardIndex + 1) + ".Barcode") {
                                boards[boardIndex].Barcode = value || "";
                            }
                            if (key == "B" + (boardIndex + 1) + ".Pass") {
                                boards[boardIndex].Pass = value || "";
                            }
                        }
                        else {
                            if (key.endsWith('=')) {
                                result[key.slice(0, -1)] = value || "";
                            } else {
                                result[key] = value || "";
                            }
                        }
                    });
                    result["custom"] = custom;
                    result["boards"] = boards;
                    msg.payload = result;
                    node.send([null, null, msg, null]);
                    //*******测试完成的数据分析结束**********
                } else if (text == "TestResult") {
                    node.log("测试结果");
                    //*******测试结果的数据分析开始**********
                    const result = {};
                    const custom = [];
                    const boards = [];
                    const data = msg.payload;

                    //按分行符分割数据
                    const lines = data.split('\n').map(line => line.trim());
                    //按等号分割成key：value
                    lines.forEach(line => {
                        const [key, value] = line.split(' = ');
                        if (key.startsWith('_')) {
                            const newKey = key.slice(1);
                            custom.push({ [newKey]: value || "" });
                        } else if (key.startsWith('/') || key === "" || key === null || key === undefined) {

                        } else if (key.startsWith('B') && !isNaN(parseInt(key[1]))) {
                            const boardIndex = parseInt(key[1]) - 1;
                            if (!boards[boardIndex]) {
                                boards[boardIndex] = { ID: "B" + (boardIndex + 1), Barcode: '', Pass: 0, data: {} };
                            }
                            if (key == "B" + (boardIndex + 1) + ".Barcode") {
                                boards[boardIndex].Barcode = value || "";
                            }
                            if (key == "B" + (boardIndex + 1) + ".Pass") {
                                boards[boardIndex].Pass = value || "";
                            }
                        }
                        else {
                            if (key.endsWith('=')) {
                                result[key.slice(0, -1)] = value || "";
                            } else {
                                result[key] = value || "";
                            }
                        }
                    });


                    //E:\lsd学习文件\文件资料\PTI-800系列\20210524153758.csv
                    const fs = require('fs-extra');
                    const iconv = require('iconv-lite');
                    //fs.readFile(result.Detail1)
                    let ans = [];
                    node.log(result.Detail1);
                    let newDetail1 = result.Detail1.toString();
                    let thenewDetail1 = newDetail1.replace(/\\\\\\\\/g, '\\\\');
                    fs.readFile(thenewDetail1, function (err, data) {
                        if (data) {
                            //node.log("开始**********");
                            //if (err) throw err;
                            var text = iconv.decode(data, 'gb2312');
                            const lines = text.split('\n').map(line => line.trim().replaceAll('"', ""));
                            let OpenFailCount = 0;
                            let ShortFailCount = 0;
                            let flag = 0;
                            let datas = {
                                DateTime: "",
                                ProgramId: "",
                                User: "",
                                DeviceId: "",
                                FixtureId: "",
                                LineId: "",
                                ModelName: "",
                                FixRetry: "",
                                BoardId: "",
                                BarCode: "",
                                TestStat: "",
                                OpenTest: "",
                                ShortTest: "",
                                CompTest: "",
                                TestTime: "",
                                OpenFailCount: { "Count": 0, "Pins": [] },
                                ShortFailCount: { "Count": 0, "Pins": [] },
                                componentData: []
                            };
                            lines.forEach(line => {
                                //  node.log(line);
                                // node.log('\n'); 
                                const values = line.split(',');
                                // node.log((values[0]));
                                if (values[0] == "DateTime") {
                                    datas.DateTime = values[1];
                                    // node.log("DateTime+++++++++++++");
                                }

                                if (values[0] == "ProgramId") {
                                    datas.ProgramId = values[1];
                                }
                                if (values[0] == "User") {
                                    datas.User = values[1];
                                }
                                if (values[0] == "DeviceId") {
                                    datas.DeviceId = values[1];
                                }
                                if (values[0] == "FixtureId") {
                                    datas.FixtureId = values[1];
                                }
                                if (values[0] == "LineId") {
                                    datas.LineId = values[1];
                                }
                                if (values[0] == "ModelName") {
                                    datas.ModelName = values[1];
                                }
                                if (values[0] == "FixRetry") {
                                    datas.FixRetry = values[1];
                                }

                                if (values[0] == "BoardId") {
                                    datas.BoardId = values[1];
                                }
                                if (values[0] == "BarCode") {
                                    datas.BarCode = values[1];
                                }
                                if (values[0] == "TestStat") {
                                    datas.TestStat = values[1];
                                }
                                if (values[0] == "OpenTest") {
                                    datas.OpenTest = values[1];
                                }
                                if (values[0] == "ShortTest") {
                                    datas.ShortTest = values[1];
                                }
                                if (values[0] == "CompTest") {
                                    datas.CompTest = values[1];
                                }
                                if (values[0] == "TestTime") {
                                    datas.TestTime = values[1];
                                }
                                if (OpenFailCount != 0) {
                                    datas.OpenFailCount.Pins.push(values[0]);
                                    OpenFailCount--;
                                }
                                if (values[0] == "OpenFailCount") {
                                    datas.OpenFailCount.Count = values[1];
                                    OpenFailCount = values[1];
                                }
                                if (ShortFailCount != 0) {
                                    datas.ShortFailCount.Pins.push(values[0]);
                                    ShortFailCount--;
                                }
                                if (values[0] == "ShortFailCount") {
                                    datas.ShortFailCount.Count = values[1];
                                    ShortFailCount = values[1];
                                }
                                if (values[0] == "LogEnd") {
                                    //node.log("结束**********");
                                    boards.forEach(one => {
                                        if (one.ID == datas.BoardId) {
                                            one.data = datas;
                                        }
                                    });
                                    OpenFailCount = 0;
                                    ShortFailCount = 0;
                                    flag = 0;
                                    datas = {
                                        DateTime: "",
                                        ProgramId: "",
                                        User: "",
                                        DeviceId: "",
                                        FixtureId: "",
                                        LineId: "",
                                        ModelName: "",
                                        FixRetry: "",
                                        BoardId: "",
                                        BarCode: "",
                                        TestStat: "",
                                        OpenTest: "",
                                        ShortTest: "",
                                        CompTest: "",
                                        TestTime: "",
                                        OpenFailCount: { "Count": 0, "Pins": [] },
                                        ShortFailCount: { "Count": 0, "Pins": [] },
                                        componentData: []
                                    };

                                }
                                if (flag == 1 && values[0] != null && values[0] != "") {
                                    let stepData = {
                                        STEP: values[0],
                                        BX: values[1],
                                        LC: values[2],
                                        Flag: values[3],
                                        Device: values[4],
                                        STDval: values[5],
                                        ACTval: values[6],
                                        plusPercent: values[7],
                                        minusPercent: values[8],
                                        MD: values[9],
                                        RG: values[10],
                                        TM: values[11],
                                        A: values[12],
                                        B: values[13],
                                        G1: values[14],
                                        G2: values[15],
                                        G3: values[16],
                                        G4: values[17],
                                        G5: values[18],
                                        TestVal: values[19],
                                        DevPercent: values[20],
                                        Result: values[21],
                                    };
                                    datas.componentData.push(stepData);
                                }
                                if (values[0] == "STEP" || flag == 1) {
                                    flag = 1;
                                    //node.log("cccccccccc");
                                }
                                // node.log(flag);
                                if (values[0] == null && values[0] == "") {
                                }

                                //node.log(values[0]);
                            });
                            //把 result赋值给msg，并且输出
                            result["custom"] = custom;
                            result["boards"] = boards;
                            msg.payload = result;
                            node.send([null, null, null, msg]);
                        }
                    });
                    //*******测试结果的数据分析结束**********
                }



            } catch (error) {
                node.error(error);
            }

        });
    }


    RED.nodes.registerType("pti816data", pti816dataNode);
}
